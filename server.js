const fs = require('fs')
const path = require('path')
const compression = require('compression')
const express = require('express')
const app = express()

//const favicon = require('serve-favicon')

const config = require('./config')
const isProduction = config.isProduction

var serverReady
var readyPromise = new Promise(resolve => {
	serverReady = resolve
})

const resolve = file => path.resolve(__dirname, file)

const createRenderer = (bundle, template) => {
	// https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
	return require('vue-server-renderer').createBundleRenderer(bundle, {
		template,
		cache: require('lru-cache')({
			max: 1000,
			maxAge: 1000 * 60 * 15
		})
	})
}

const serve = (path, cache) => express.static(resolve(path), {
	maxAge: cache && isProduction ? 60 * 60 * 24 * 30 : 0
})

let renderer
if (isProduction) {
	// In production: create server renderer using server bundle and index HTML
	// template from real fs.
	// The server bundle is generated by vue-ssr-webpack-plugin.
	const bundle = require('./dist/vue-ssr-bundle.json')
	// src/index.template.html is processed by html-webpack-plugin to inject
	// build assets and output as dist/index.html.
	const template = fs.readFileSync(resolve('./dist/index.html'), 'utf-8')
	renderer = createRenderer(bundle, template)
	serverReady()
} else {
	// In development: setup the dev server with watch and hot-reload,
	// and create a new renderer on bundle / index template update.
	require('./build/setup-dev-server')(app, (bundle, template) => {
		renderer = createRenderer(bundle, template)
		serverReady()
	})
}

const render = (req, res) => {
	if (!renderer) {
		return res.end('Waiting for compilation... Refresh in a moment.')
	}

	const s = Date.now()

	res.setHeader("Content-Type", "text/html")

	const errorHandler = err => {
		if (err && err.code === 404) {
			res.status(404).end('404 | Page Not Found')
		} else {
			// Render Error Page or Redirect
			res.status(500).end('500 | Internal Server Error')
			console.error(`Error during render : ${req.url}`)
			console.error(err)
		}
	}

	console.log(`Rendering: ${req.url}`)
	renderer.renderToStream({ url: req.url })
		.on('end', () => console.log(`Whole request: ${Date.now() - s}ms`))
		.on('error', errorHandler)
		.pipe(res)
}

app.use(compression({ threshold: 0 }))
//app.use(favicon('./static/logo.png'))

app.use('/dist', serve('./dist', true))
app.use('/service-worker.js', serve('./dist/service-worker.js'))
app.use('/manifest.json', serve('./static/manifest.json', true))

app.get('*', render)

const port = config.server.port
var server = app.listen(port, () => {
	console.log(`Server started at localhost:${port}`)
})

module.exports = {
	ready: readyPromise,
	close: () => {
		server.close()
	}
}
